name: ReleaseLibraries

on:
  push:
      branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
#  ARTIFACTORY_USERNAME: "sreenivasrao.basi@gmail.com"
#  ARTIFACTORY_PASSWORD: ${{ secrets.JFROG_ARTIFACTORY_TOKEN }}
  ARTIFACTORY_HOST: "https://artifactory.build"
  ARTIFACT_VERSION: "1.0.0"
  ARTIFACTORY_LOCAL: "https://artifactory.build"
  ARTIFACTORY_PATH: "com/test_artfct/jar"
  VERSION_TYPE: "SNAPSHOT"
  COMMITMESSAGE: ${{ github.event.head_commit.message }}

jobs:

  ReleaseLibraries-Job:
    runs-on: ubuntu-22.04
    steps:
      - name: Validate input commit message
        run: |
          message=${{ contains(github.event.head_commit.message, 'Release Library') }}
          if [ ${message} == false ]; then
            echo "Invalid commit message, Please use 'Release Library' to run job "
            exit -1
          fi
          echo "Commit message is :" $message
      - name: Check-out the development branch
        uses: actions/checkout@v3.3.0
      - name: Generate matrix with all modules of WhatTheHack repository
        id: set-matrix
        run: |
          echo "::set-output name=matrix::$(ls -l | grep '^d' | awk -F ' ' '{print $9}' | grep -Po '\d{3}.*' | jq -R -s -c 'split("\n") | map(select(length > 0))')"
      - name: Set output
        run: echo "::set-output name={name}::{value}"
      - name: get latest tag
        id: latest-tag
        run: |
          tag_name="DEV."
          latest_tag=$(git tag --sort creatordate -l $tag_name* | tail -n1)
          if [ -z "$latest_tag" ];
            then
              tag_name=""$tag_name"100000"
          else
              tag_name=$(perl -pe 's/(\d+)(?!.*\d+)/$1+1/e' <<< $latest_tag)
          fi
          echo "TAG_NAME=${tag_name}" >> $GITHUB_OUTPUT
          echo "tag name = " $tag_name

      - name: Setting up variables
        run: |
          echo "WORK_DIR=`pwd`" >> $GITHUB_ENV
      - name: Perform BOM file validation
        run: |
          for i in *.bom
          do
          echo "file name :" $i
          while read line;
          do
            data+=("$line")
          done <$i
          done
          echo "Available BOM file :" $i
          for value in "${data[@]}";
          do
            if [ ${value} == false ]; then
              echo "Pom file not available "
              exit -1
            fi
            echo "Sub modules/Dependencies :" $value
            find $value/pom.xml
          done
      - name: Setup Java
        uses: actions/setup-java@v3.10.0
        with:
          distribution: 'temurin'
          java-version: '19'
          cache: 'maven'

      - name: Set up Cache for Maven
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: GitHub Actions Build with Maven
        run: |
          mvn -B package --file pom.xml
          #mvn -s ./settings.xml package -Dmaven.test.skip
          
      - name: Creating Tag
        run: |
          tag_name="${{ steps.latest-tag.outputs.TAG_NAME }}"
          echo "Creating new tag $tag_name"
          branch_name=$(echo $GITHUB_REF | awk -F/ '{print $NF}')
          git tag $tag_Name -m "$branch_name"
          git push --tags
          
      - name: get the pushed tag
        id: pushed-tag
        run: |
          echo "TAG_NAME=${{  github.ref_name }}" >> $GITHUB_OUTPUT
      - name: Checkout the pushed tag
        run: |
          tag_name="${{ steps.pushed-tag.outputs.TAG_NAME }}"
          git fetch --all --tags
          git checkout "tags/${tag_name}" -b "merge/development/${tag_name}"
          echo $tag_name
          
      - name: Upload artifacts for deployment job to github
        uses: actions/upload-artifact@v3.1.2
        with:
          name: release-library
          path: |
            ${{ github.workspace }}/**/target/*.jar
            ${{ github.workspace }}/**/pom.xml
      - name: Download artifact from build job in github
        uses: actions/download-artifact@v3.0.2
        with:
          name: release-library
      - name: Display structure of downloaded files in github
        run: ls -R
      - name: Deploy jar to Artifactory
        run: |
          ARTIFACT=one-1.0.jar
          DEPLOY_ARTIFACT_PATH="${{env.ARTIFACTORY_LOCAL}}/${{env.ARTIFACTORY_PATH}}/$ARTIFACT"
          ARTIFACT_PATH=./**/target/$ARTIFACT
          echo artifact name: $ARTIFACT
          echo deploy artifact path: $DEPLOY_ARTIFACT_PATH
          curl -u ${{env.ARTIFACTORY_USERNAME}}:${{env.ARTIFACTORY_PASSWORD}} -X PUT "$DEPLOY_ARTIFACT_PATH" -T $ARTIFACT_PATH
